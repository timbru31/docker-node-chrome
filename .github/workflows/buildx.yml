name: buildx

on:
  schedule:
    - cron: "37 07 * * *"
  pull_request:
  push:

jobs:
  buildx:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        docker-file:
          - path: 12
            tags: "12 erbium"
            platforms: linux/amd64

          - path: 12/slim
            tags: "12-slim erbium-slim"
            platforms: linux/amd64

          - path: 12/alpine
            tags: "12-alpine erbium-alpine"
            platforms: linux/amd64,linux/arm64

          - path: 14
            tags: "14 fermium latest"
            platforms: linux/amd64

          - path: 14/slim
            tags: "14-slim fermium-slim slim"
            platforms: linux/amd64

          - path: 14/alpine
            tags: "14-alpine fermium-alpine alpine"
            platforms: linux/amd64,linux/arm64

          - path: 16
            tags: "16 gallium"
            platforms: linux/amd64

          - path: 16/slim
            tags: "16-slim gallium-slim"
            platforms: linux/amd64

          - path: 16/alpine
            tags: "16-alpine gallium-alpine"
            platforms: linux/amd64,linux/arm64

    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: Prepare
        id: prepare
        run: |
          DOCKER_IMAGE=timbru31/node-chrome

          TEMP="${{ matrix.docker-file.tags }}"
          TAGZ=($TEMP)
          VERSION=${TAGZ[0]}

          for i in "${!TAGZ[@]}"; do
            if [ "$i" -eq "0" ];
            then
              TAGS="${DOCKER_IMAGE}:${TAGZ[$i]}"
            else
              TAGS="${TAGS},${DOCKER_IMAGE}:${TAGZ[$i]}"
            fi
          done

          echo ::set-output name=docker_image::${DOCKER_IMAGE}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1.2.0

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1.5.1
        with:
          install: true

      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Docker Buildx (build)
        uses: docker/build-push-action@v2.7.0
        if: success() && !contains(github.ref, 'master')
        with:
          push: false
          context: ./${{ matrix.docker-file.path }}
          file: ./${{ matrix.docker-file.path }}/Dockerfile
          build-args: REFRESHED_AT=$(date +%Y-%m-%d)
          platforms: ${{ matrix.docker-file.platforms }}
          tags: ${{ steps.prepare.outputs.tags }}

      - name: Docker Login
        if: success() && contains(github.ref, 'master')
        uses: docker/login-action@v1.10.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Buildx (push)
        uses: docker/build-push-action@v2.7.0
        if: success() && contains(github.ref, 'master')
        with:
          push: true
          context: ./${{ matrix.docker-file.path }}
          file: ./${{ matrix.docker-file.path }}/Dockerfile
          build-args: REFRESHED_AT=$(date +%Y-%m-%d)
          platforms: ${{ matrix.docker-file.platforms }}
          tags: ${{ steps.prepare.outputs.tags }}

      - name: Inspect Image
        if: always() && github.event_name != 'pull_request' && contains(github.ref, 'master')
        run: |
          docker buildx imagetools inspect ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}

      - name: Clear
        if: always() && github.event_name != 'pull_request'
        run: |
          rm -f ${HOME}/.docker/config.json
